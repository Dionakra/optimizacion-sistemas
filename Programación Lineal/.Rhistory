help(plot)
?plot
install.packages("XLConnect")##instalar
require(XLConnect)##cargar
library(XLConnect)## cargar
detach("package:XLConnect") ##lo descargamos
remove.packages("XLConnect")## lo desinstalamos
a<- 5.69
vector<-c(9,4,5.8,7)
vectordecaracteres<-c("Lunes","Martes","Miercoles")
vectorenteros<--2:6
vectorsecuencia<-seq(5,10,0.5)
set.seed(10)
Colesterol<-sample(120:260,5,replace=TRUE) # Con reemplazamiento --> Los valores se pueden repetir
Glucemia<-sample(70:110,5,replace=TRUE)
library(foreign)
datos<-data.frame(read.spss("../datos/arboles.sav"))
names(datos)
attach(datos)
summary(datos)
library(foreign)
datos<-data.frame(read.spss("../datos/arboles.sav"))
names(datos)
attach(datos)
datos
plot(volumen,altura)
plot(volumen,altura)
plot(volumen, diametro)
regre <- lm(volumen~altura) # Regresión lineal simple, simple porque solo hay una variable explicativa (altura). Una variable dependiente y otra independiente. La ecuación de regresión sería: vol = beta_0 + beta_1*altura, para completar esa ecuación necesitamos conocer la estimación de beta_0 y beta_1. ¿Cómo se calcula en R la regresión lineal simple? Con lm(y~x)
summary(regre)
plot(volumen,altura)
regredim = lm(volumen~diametro)
summary(regredim)
summary(regre)
summary(regredim)
regrelin<- lm(volumen~altura+diametro)
summary(regrelin)
regrelin<-lm(volumen~.,data=datos)
summary(regrelin)
regrelin<-lm(volumen~.,data=datos)
summary(regrelin)
regredim = lm(volumen~diametro)
summary(regredim)
summary(regre)
plot(volumen,altura)
regrelin<- lm(volumen~altura+diametro)
regrelin<-lm(volumen~.,data=datos)
summary(regrelin)
par(mfrow=c(2,2))
plot(regrelin)
par(mfrow=c(1,1))
plot(predict(regrelin), residuals(regrelin))
plot(predict(regrelin), rstudent(regrelin))
shapiro.test(regrelin$residuals)
library(car)
ncvTest(regrelin)
spreadLevelPlot(regrelin)
install.packages("car")
library("car", lib.loc="~/R/win-library/3.3")
library(car)
ncvTest(regrelin)
spreadLevelPlot(regrelin)
spreadLevelPlot(regrelin)
rstudent(regrelin)
plot(predict(regrelin), abs(rstudent(regrelin)),pch=19, main="Residuos studentizados frente a val. ajustados")
grid()
lines(x=predict(regrelin),y=c(rep(3,31)),col="red")
text( predict(regrelin), abs(rstudent(regrelin)), row.names(datos), cex=0.7, pos=3, col="black")
grid()
lines(x=seq(1:31),y=c(rep(3,31)),col="red")
text( seq(1:31), abs(rstudent(regrelin)), row.names(datos), cex=0.7, pos=3, col="black")
rstudent(regrelin)
plot(predict(regrelin), abs(rstudent(regrelin)),pch=19, main="Residuos studentizados frente a val. ajustados")
grid()
# Este gráfico nos sirve para ver los posibles valores atípicos, que pueden verse el 70 y el 0
lines(x=predict(regrelin),y=c(rep(3,31)),col="red")
text( predict(regrelin), abs(rstudent(regrelin)), row.names(datos), cex=0.7, pos=3, col="black")
boxplot(rstudent(regrelin))$out
$out
boxplot(residuals(regrelin))$out
hatvalues(regrelin)
plot(hatvalues(regrelin),main="Index plot de valores leverage",pch=19 )
grid()
hatcrit = (2*regrelin$rank)/(regrelin$df.residual+regrelin$rank)
hatcrit
which(hatvalues(regrelin)>hatcrit)
setwd("~/OS/Programación Lineal")
knitr::opts_chunk$set(echo = TRUE)
library(lpSolve)
install.packages("lpSolve")
library("lpSolve", lib.loc="~/R/win-library/3.3")
library(lpSolve)
coef.z = c(10, 12, 14, 11, 9, 10)
matA_menorigual = matrix(c(20, 0, 0, 22, 0, 0,
0, 24, 0, 0, 18, 0,
0, 0, 28, 0, 0, 30), 3, 6, byrow=T)
matA_mayorigual = matrix(c(1, 1, 1, 0, 0, 0,
0, 0, 0, 1, 1, 1), 2, 6, byrow=T)
matA = rbind(matA_menorigual, matA_mayorigual)
dir.rest=c(rep("<=", 3), rep(">=", 2))
coef.b = c(200, 200, 200, 500, 600)
sol.lp = lp("min", coef.z, matA, dir.rest, coef.b)
#sol.lp = lp("min", coef.z, matA, dir.rest, coef.b, compute.sens=T)
sol.lp
sol.lp$solution
library(lpSolve)
coef.z = c(45, 35, -100, -100)
matA_menorigual = matrix(c(1, 0, -5, 0,
0,  1, 0, -8,
-0.6, 0.4, 0, 0,
0.3, -0.7, 0, 0,
80, 70, 100, 100))
matA = matA_menorigual
dir.rest=c(rep("<=", 5))
coef.b = c(rep(0, 4), 1000000)
sol.lp = lp("max", coef.z, matA, dir.rest, coef.b)
#sol.lp = lp("min", coef.z, matA, dir.rest, coef.b, compute.sens=T)
sol.lp
sol.lp$solution
library(lpSolve)
coef.z = c(45, 35, -100, -100)
matA_menorigual = matrix(c(1, 0, -5, 0,
0,  1, 0, -8,
-0.6, 0.4, 0, 0,
0.3, -0.7, 0, 0,
80, 70, 100, 100), 5, 3, byrow=T)
matA = matA_menorigual
dir.rest=c(rep("<=", 5))
coef.b = c(rep(0, 4), 1000000)
sol.lp = lp("max", coef.z, matA, dir.rest, coef.b)
#sol.lp = lp("min", coef.z, matA, dir.rest, coef.b, compute.sens=T)
sol.lp
sol.lp$solution
library(lpSolve)
coef.z = c(45, 35, -100, -100)
matA_menorigual = matrix(c(1, 0, -5, 0,
0,  1, 0, -8,
-0.6, 0.4, 0, 0,
0.3, -0.7, 0, 0,
80, 70, 100, 100), 5, 3, byrow=T)
matA = matA_menorigual
dir.rest=c(rep("<=", 5))
coef.b = c(rep(0, 4), 1000000)
sol.lp = lp("max", coef.z, matA, dir.rest, coef.b, int.vec=c(1, 2))
#sol.lp = lp("min", coef.z, matA, dir.rest, coef.b, compute.sens=T)
sol.lp
sol.lp$solution
library(lpSolve)
coef.z = c(45, 35, -100, -100)
matA_menorigual = matrix(c(1, 0, -5, 0,
0,  1, 0, -8,
-0.6, 0.4, 0, 0,
0.3, -0.7, 0, 0,
80, 70, 100, 100), 5, 4, byrow=T)
matA = matA_menorigual
dir.rest=c(rep("<=", 5))
coef.b = c(rep(0, 4), 1000000)
sol.lp = lp("max", coef.z, matA, dir.rest, coef.b, int.vec=c(1, 2))
#sol.lp = lp("min", coef.z, matA, dir.rest, coef.b, compute.sens=T)
sol.lp
sol.lp$solution
library(lpSolve)
coef.z = c(0, 0, 0, 0, 1, -1)
matA = matrix(c(-3, 4, -7, 15, -1, 1,
5, -3, 9, 4, -1, 1,
3, -9, 10, -8, -1, 1,
1, 1, 1, 1, 0, 0), 4, 6, byrow=T)
dir.rest=c(rep(">=", 3), "<=")
coef.b = c(rep(0, 3), 500)
sol.lp = lp("max", coef.z, matA, dir.rest, coef.b, int.vec=c(1, 2))
#sol.lp = lp("min", coef.z, matA, dir.rest, coef.b, compute.sens=T)
sol.lp
sol.lp$solution
library(lpSolve)
coef.z = c(0, 0, 0)
matA = matrix(c(-1, 2, -2,
-1, 1, -1,
0, -1, 1,
1, 1, -1,
2, -1, 2), 5, 3, byrow=T)
dir.rest=c(rep(">=", 3), ">=", ">=")
coef.b = c(1, 1, -1, 0.001-1, 0.001-2)
#sol.lp = lp("max", coef.z, matA, dir.rest, coef.b, int.vec=c(1, 2))
sol.lp = lp("min", coef.z, matA, dir.rest, coef.b, compute.sens=T)
sol.lp
sol.lp$solution
library(lpSolve)
coef.z = c(0, 0, 0)
matA = matrix(c(-1, 2, -2,
-1, 1, -1,
0, -1, 1,
1, 1, -1,
2, -1, 2), 5, 3, byrow=T)
dir.rest=c(rep(">=", 3), ">=", ">=")
coef.b = c(1, 1, -1, 0.0001-1, 0.0001-2)
#sol.lp = lp("max", coef.z, matA, dir.rest, coef.b, int.vec=c(1, 2))
sol.lp = lp("min", coef.z, matA, dir.rest, coef.b, compute.sens=T)
sol.lp
sol.lp$solution
library(lpSolve)
coef.z = c(0, 0, 0)
matA = matrix(c(-1, 2, -2,
-1, 1, -1,
0, -1, 1,
1, 1, -1,
2, -1, 2), 5, 3, byrow=T)
dir.rest=c(rep("<=", 3), ">=", ">=")
coef.b = c(1, 1, -1, 0.0001-1, 0.0001-2)
#sol.lp = lp("max", coef.z, matA, dir.rest, coef.b, int.vec=c(1, 2))
sol.lp = lp("min", coef.z, matA, dir.rest, coef.b, compute.sens=T)
sol.lp
sol.lp$solution
library(lpSolve)
coef.z = c(0, 0, 0)
matA = matrix(c(-1, 2, -2,
-1, 1, -1,
0, -1, 1,
1, 1, -1,
2, -1, 2), 5, 3, byrow=T)
dir.rest=c(rep("<=", 3), ">=", ">=")
coef.b = c(1, 1, -1, 0.0001-1, 0.0001-2)
#sol.lp = lp("max", coef.z, matA, dir.rest, coef.b, int.vec=c(1, 2))
sol.lp = lp("min", coef.z, matA, dir.rest, coef.b, compute.sens=T)
sol.lp
sol.lp$solution
